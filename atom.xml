<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poplar</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-29T03:07:23.530Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>alex Bai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spark事件监听详解</title>
    <link href="http://yoursite.com/archives/9efd5164.html"/>
    <id>http://yoursite.com/archives/9efd5164.html</id>
    <published>2019-01-29T02:19:00.000Z</published>
    <updated>2019-01-29T03:07:23.530Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>本文试图解释一下Spark中事件监听的实现原理。<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Spark中很多组件间都是靠事件消息实现通信，RPC和事件消息机制的目的都是实现组件之间的通信，前者解决远程通信问题，而后者则是在本地较为高效的通信方式。Spark中大量采用事件监听这种方式，实现driver端组件间的通信。本文试图解释一下Spark中事件监听的实现原理。</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式(Observer Pattern)：定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。其中发生改变的对象称为主题，被通知对象称之为观察者，一个主题可以有多个观察者，而观察者之间保持相对独立，可以根据需要增加和删除观察者，使得系统更易于扩展。</p><p><img src="/images/pasted-2.png" alt="upload successful"></p><h3 id="Spark中的事件监听"><a href="#Spark中的事件监听" class="headerlink" title="Spark中的事件监听"></a>Spark中的事件监听</h3><h4 id="SparkListener"><a href="#SparkListener" class="headerlink" title="SparkListener"></a>SparkListener</h4><p>Spark中的事件监听机制，其本质上就是观察者模式的实现。下面就以SparkListener为例来解析事件监听是如何设计的。首先我们看SparkListener</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SparkListener</span> <span class="keyword">extends</span> <span class="title">SparkListenerInterface</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onExecutorAdded</span></span>(executorAdded:<span class="type">SparkListenerExecutorAdded</span>):<span class="type">Unit</span> = &#123; &#125;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onExecutorRemoved</span></span>(executorRemoved:<span class="type">SparkListenerExecutorRemoved</span>): <span class="type">Unit</span> = &#123; &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了简化分析，我们以executor的增删事件监听来做具体的分析。这里我们可以看到onExecutorAdded和onExecutorRemoved两个方法，很明显这是用来处理executor增删事件的方法。SparkListener继承自SparkListenerInterface接口，其内部就是这些方法的声明，代码省略。</p><h4 id="监听器的结构"><a href="#监听器的结构" class="headerlink" title="监听器的结构"></a>监听器的结构</h4><p>很明显，要使得类的对象能够实现对executor事件的响应，就必须继承SparkListener。举例来讲，我们可以看到SaveExecutorInfo（org.apache.spark.deploy.SaveExecutorInfo）继承自SparkListener。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>[spark] <span class="class"><span class="keyword">class</span> <span class="title">SaveExecutorInfo</span> <span class="keyword">extends</span> <span class="title">SparkListener</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> addedExecutorInfos = mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">ExecutorInfo</span>]()</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onExecutorAdded</span></span>(executor: <span class="type">SparkListenerExecutorAdded</span>) &#123;</span><br><span class="line">    addedExecutorInfos(executor.executorId) = executor.executorInfo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其重载了onExecutorAdded方法，收集executor的信息。</p><h4 id="监听器如何使用"><a href="#监听器如何使用" class="headerlink" title="监听器如何使用"></a>监听器如何使用</h4><p>SaveExecutorInfo是如何能够简单地通过继承自一个SparkListener类，甚至没有任何消息接受和处理逻辑，来实现事件响应呢？还是举例说明，我们可以看一下如何使用SaveExecutorInfo对象的。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogUrlsStandaloneSuite</span> <span class="keyword">extends</span> <span class="title">SparkFunSuite</span> <span class="keyword">with</span> <span class="title">LocalSparkContext</span> </span>&#123;</span><br><span class="line">    <span class="comment">//部分代码省略</span></span><br><span class="line">    <span class="keyword">val</span> listener = <span class="keyword">new</span> <span class="type">SaveExecutorInfo</span></span><br><span class="line">    sc.addSparkListener(listener) <span class="comment">//将一个SaveExecutorInfo监听器对象添加到sc中</span></span><br><span class="line">    <span class="comment">// Trigger a job so that executors get added</span></span><br><span class="line">    sc.parallelize(<span class="number">1</span> to <span class="number">100</span>, <span class="number">4</span>).map(_.toString).count()</span><br><span class="line">    sc.listenerBus.waitUntilEmpty(<span class="type">WAIT_TIMEOUT_MILLIS</span>)</span><br><span class="line">    listener.addedExecutorInfos.values.foreach &#123; info =&gt;</span><br><span class="line">      assert(info.logUrlMap.nonEmpty)</span><br><span class="line">      <span class="comment">// Browse to each URL to check that it's valid</span></span><br><span class="line">      info.logUrlMap.foreach &#123; <span class="keyword">case</span> (logType, logUrl) =&gt;</span><br><span class="line">        <span class="keyword">val</span> html = <span class="type">Source</span>.fromURL(logUrl).mkString</span><br><span class="line">        assert(html.contains(<span class="string">s"<span class="subst">$logType</span> log page"</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//部分代码省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="监听器如何工作"><a href="#监听器如何工作" class="headerlink" title="监听器如何工作"></a>监听器如何工作</h4><p>这里可以看到，在声明了一个SaveExecutorInfo对象之后，需要将它添加到sc中，sc其实就是SparkContext对象，也就是一个Spark application唯一的入口。SparkContext中addSparkListener方法的代码如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * :: DeveloperApi ::</span></span><br><span class="line"><span class="comment"> * Register a listener to receive up-calls from events that happen during execution.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeveloperApi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addSparkListener</span></span>(listener: <span class="type">SparkListenerInterface</span>) &#123;</span><br><span class="line">  listenerBus.addListener(listener)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的listenerBus，是一个监听器总线对象，其声明如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>[spark] <span class="keyword">val</span> listenerBus = <span class="keyword">new</span> <span class="type">LiveListenerBus</span></span><br></pre></td></tr></table></figure><p>现在思路就变得很清晰了，SaveExecutorInfo对象是注册到LiveListenerBus对象中，然后通过LiveListenerBus对象来实现事件监听，其实这里我们通过取名就可以知道其设计思路，类似于计算机中的总线，设备都通过总线来传递消息，而LiveListenerBus就刚好充当了总线的角色，一个个SparkListener子类对象就是一个个的设备，它们可以接受来自总线的消息并作出相应的处理。</p><h4 id="监听器总线如何传递消息"><a href="#监听器总线如何传递消息" class="headerlink" title="监听器总线如何传递消息"></a>监听器总线如何传递消息</h4><p>我们可以看一下LiveListenerBus类，该类实现了SparkListenerBus接口，直接看其入口start方法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span></span>(sc: <span class="type">SparkContext</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">if</span> (started.compareAndSet(<span class="literal">false</span>, <span class="literal">true</span>)) &#123;</span><br><span class="line">    sparkContext = sc</span><br><span class="line">    listenerThread.start()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalStateException</span>(<span class="string">s"<span class="subst">$name</span> already started!"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接启动了一个listenerThread：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> listenerThread = <span class="keyword">new</span> <span class="type">Thread</span>(name) &#123;</span><br><span class="line">  setDaemon(<span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = <span class="type">Utils</span>.tryOrStopSparkContext(sparkContext) &#123;</span><br><span class="line">    <span class="type">LiveListenerBus</span>.withinListenerThread.withValue(<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        eventLock.acquire()</span><br><span class="line">        self.synchronized &#123;</span><br><span class="line">          processingEvent = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">val</span> event = eventQueue.poll</span><br><span class="line">          <span class="keyword">if</span> (event == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Get out of the while loop and shutdown the daemon thread</span></span><br><span class="line">            <span class="keyword">if</span> (!stopped.get) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalStateException</span>(<span class="string">"Polling `null` from eventQueue means"</span> +</span><br><span class="line">                <span class="string">" the listener bus has been stopped. So `stopped` must be true"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">          &#125;</span><br><span class="line">          postToAll(event)<span class="comment">//将事件通知到所有注册的listener中</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          self.synchronized &#123;</span><br><span class="line">            processingEvent = <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个listenerThread是一个守护线程，其核心逻辑就是不停地在一个事件队列eventQueue里取出事件，如果事件合法且LiverListenerBus没有被关停，就将事件通知给所有注册的listener中，postToAll方法在ListenerBus接口中实现：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="function"><span class="keyword">def</span> <span class="title">postToAll</span></span>(event: <span class="type">E</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="comment">// JavaConverters can create a JIterableWrapper if we use asScala.</span></span><br><span class="line">  <span class="comment">// However, this method will be called frequently. To avoid the wrapper cost, here we use</span></span><br><span class="line">  <span class="comment">// Java Iterator directly.</span></span><br><span class="line">  <span class="keyword">val</span> iter = listeners.iterator</span><br><span class="line">  <span class="keyword">while</span> (iter.hasNext) &#123;</span><br><span class="line">    <span class="keyword">val</span> listener = iter.next()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      doPostEvent(listener, event)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">NonFatal</span>(e) =&gt;</span><br><span class="line">        logError(<span class="string">s"Listener <span class="subst">$&#123;Utils.getFormattedClassName(listener)&#125;</span> threw an exception"</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路很清晰，就是用迭代器遍历listener，逐个将消息发送。而doPostEvent方法是一个抽象方法，其具体实现要由继承自ListerBus的类负责，比如之前举例中的SparkListener，就有相应的SparkListenerBus接口：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>[spark] <span class="class"><span class="keyword">trait</span> <span class="title">SparkListenerBus</span></span></span><br><span class="line"><span class="class">  <span class="keyword">extends</span> <span class="title">ListenerBus</span>[<span class="type">SparkListenerInterface</span>, <span class="type">SparkListenerEvent</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">doPostEvent</span></span>(</span><br><span class="line">      listener: <span class="type">SparkListenerInterface</span>,</span><br><span class="line">      event: <span class="type">SparkListenerEvent</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    event <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="comment">//部分代码省略</span></span><br><span class="line">      <span class="keyword">case</span> executorAdded: <span class="type">SparkListenerExecutorAdded</span> =&gt;</span><br><span class="line">        listener.onExecutorAdded(executorAdded)</span><br><span class="line">      <span class="keyword">case</span> executorRemoved: <span class="type">SparkListenerExecutorRemoved</span> =&gt;</span><br><span class="line">        listener.onExecutorRemoved(executorRemoved)</span><br><span class="line">        <span class="comment">//部分代码省略</span></span><br><span class="line">      <span class="keyword">case</span> _ =&gt; listener.onOtherEvent(event)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里对每个事件进行类型匹配，比如doPostEvent需要将executorAdded事件告知一个listener，对应地，这个listener就调用一下自己的onExecutorAdded方法，对该事件作出自己的反应，比如前面的SaveExecutorInfo就实现了onExecutorAdded方法，其内容就是保存一下executor的信息。到这里其实还有一个重要的问题被忽视，LiveListenerBus发给注册在它这里的listener的事件消息是从何而来的？细心一点就可以发现，LiveListenerBus中有一个post方法:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span></span>(event: <span class="type">SparkListenerEvent</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">if</span> (stopped.get) &#123;</span><br><span class="line">    <span class="comment">// Drop further events to make `listenerThread` exit ASAP</span></span><br><span class="line">    logError(<span class="string">s"<span class="subst">$name</span> has already stopped! Dropping event <span class="subst">$event</span>"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">val</span> eventAdded = eventQueue.offer(event)</span><br><span class="line">  <span class="keyword">if</span> (eventAdded) &#123;</span><br><span class="line">    eventLock.release()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    onDropEvent(event)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其核心就是向事件队列里添加相应的事件。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>总结之，Spark中监听器的实现核心其实就是一个个需要对事件响应的监听器对象，注册到一个监听器总线，需要发送事件消息的组件将发生的事件消息提交到总线，然后总线将事件消息转发给一个个注册在它上面的监听器，最后监听器对事件进行响应。其实就是一个典型的观察者模式使用。</p><p>原文链接(有改动)：<a href="https://wongxingjun.github.io/2017/01/01/Spark%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">Spark事件监听详解</a></p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;本文试图解释一下Spark中事件监听的实现原理。&lt;br&gt;
    
    </summary>
    
      <category term="Spark" scheme="http://yoursite.com/categories/Spark/"/>
    
    
      <category term="事件监听" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/"/>
    
  </entry>
  
  <entry>
    <title>Python线程池模拟实现</title>
    <link href="http://yoursite.com/archives/c07a9f32.html"/>
    <id>http://yoursite.com/archives/c07a9f32.html</id>
    <published>2019-01-06T13:36:00.000Z</published>
    <updated>2019-01-06T14:00:44.970Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>Python线程池模拟实现，模拟线程复用减少系统资源的开销。<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 参考（有改动）:http://www.open-open.com/home/space-5679-do-blog-id-3247.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkManager</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, work_num=<span class="number">1000</span>,thread_num=<span class="number">2</span>)</span>:</span></span><br><span class="line">        self.work_queue = Queue.Queue()</span><br><span class="line">        self.threads = []</span><br><span class="line">        self.__init_work_queue(work_num)</span><br><span class="line">        self.__init_thread_pool(thread_num)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        初始化线程</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init_thread_pool</span><span class="params">(self,thread_num)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(thread_num):</span><br><span class="line">            self.threads.append(Work(self.work_queue))</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        初始化工作队列</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init_work_queue</span><span class="params">(self, jobs_num)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(jobs_num):</span><br><span class="line">            self.add_job(do_job, i)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        添加一项工作入队</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_job</span><span class="params">(self, func, *args)</span>:</span></span><br><span class="line">        self.work_queue.put((func, list(args)))<span class="comment">#任务入队，Queue内部实现了同步机制</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        检查剩余队列任务</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_queue</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.work_queue.qsize()</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        等待所有线程运行完毕</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait_allcomplete</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.threads:</span><br><span class="line">            <span class="keyword">if</span> item.isAlive():item.join()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Work</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, work_queue)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.work_queue = work_queue</span><br><span class="line">        self.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#死循环，从而让创建的线程在一定条件下关闭退出</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                do, args = self.work_queue.get(block=<span class="keyword">False</span>)<span class="comment">#任务异步出队，Queue内部实现了同步机制</span></span><br><span class="line">                do(args)</span><br><span class="line">                self.work_queue.task_done()<span class="comment">#通知系统任务完成</span></span><br><span class="line">            <span class="keyword">except</span> Exception,e:</span><br><span class="line">                <span class="keyword">print</span> str(e)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#具体要做的任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_job</span><span class="params">(args)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)<span class="comment">#模拟处理时间</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">print</span> threading.current_thread(), list(args)</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line">    start = time.time()</span><br><span class="line">    work_manager =  WorkManager(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">    work_manager.wait_allcomplete()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"cost all time: %s"</span> % (end-start)</span><br></pre></td></tr></table></figure><p>python 的GIL规定每个时刻只能有一个线程访问python虚拟机，所以使用python多线程来做计算是很不合算的，但是对于IO密集型应用，python多线程效果还是很好的。</p><p>那么对于计算密集型任务，如何实现并行执行呢？有以下几个方法：</p><ul><li>python multiprocessing模块，发挥多核优势</li><li>pypy，可实现真正的多线程</li></ul></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;Python线程池模拟实现，模拟线程复用减少系统资源的开销。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="线程池" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python多线程示例</title>
    <link href="http://yoursite.com/archives/4a17b156.html"/>
    <id>http://yoursite.com/archives/4a17b156.html</id>
    <published>2019-01-06T02:38:00.000Z</published>
    <updated>2019-01-06T13:44:40.170Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>基于代码示例展示Python多线程<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h3 id="单线程示例"><a href="#单线程示例" class="headerlink" title="单线程示例"></a>单线程示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_responses</span><span class="params">()</span>:</span></span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">'http://www.google.com'</span>,</span><br><span class="line">        <span class="string">'http://www.amazon.com'</span>,</span><br><span class="line">        <span class="string">'http://www.ebay.com'</span>,</span><br><span class="line">        <span class="string">'http://www.alibaba.com'</span>,</span><br><span class="line">        <span class="string">'http://www.reddit.com'</span></span><br><span class="line">    ]</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        <span class="keyword">print</span> url</span><br><span class="line">        resp = urllib2.urlopen(url)</span><br><span class="line">        <span class="keyword">print</span> resp.getcode()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Elapsed time: %s"</span> % (time.time()-start)</span><br><span class="line"> </span><br><span class="line">get_responses()</span><br></pre></td></tr></table></figure><p>程序输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http://www.google.com 200 </span><br><span class="line">http://www.amazon.com 200 </span><br><span class="line">http://www.ebay.com 200 </span><br><span class="line">http://www.alibaba.com 200 </span><br><span class="line">http://www.reddit.com 200 </span><br><span class="line">Elapsed time: 3.0814409256</span><br></pre></td></tr></table></figure></p><p>解读：URL按顺序被依次串行请求，网络请求会花费较长的时间，所以CPU在等待网络请求返回时一直处于闲置状态。</p><h3 id="多线程示例"><a href="#多线程示例" class="headerlink" title="多线程示例"></a>多线程示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetUrlThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        self.url = url </span><br><span class="line">        super(GetUrlThread, self).__init__()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        resp = urllib2.urlopen(self.url)</span><br><span class="line">        <span class="keyword">print</span> self.url, resp.getcode()</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_responses</span><span class="params">()</span>:</span></span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">'http://www.google.com'</span>, </span><br><span class="line">        <span class="string">'http://www.amazon.com'</span>, </span><br><span class="line">        <span class="string">'http://www.ebay.com'</span>, </span><br><span class="line">        <span class="string">'http://www.alibaba.com'</span>, </span><br><span class="line">        <span class="string">'http://www.reddit.com'</span></span><br><span class="line">    ]</span><br><span class="line">    start = time.time()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        t = GetUrlThread(url)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Elapsed time: %s"</span> % (time.time()-start)</span><br><span class="line"> </span><br><span class="line">get_responses()</span><br></pre></td></tr></table></figure><p>程序输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http://www.reddit.com 200 </span><br><span class="line">http://www.google.com 200 </span><br><span class="line">http://www.amazon.com 200 </span><br><span class="line">http://www.alibaba.com 200 </span><br><span class="line">http://www.ebay.com 200 </span><br><span class="line">Elapsed time: 0.689890861511</span><br></pre></td></tr></table></figure></p><p>解读：通过多线程来减少CPU的等待时间，即在等待一个线程网络请求返回时，CPU可以继续处理其它线程中的请求操作。注意，在该多线程环境下，我们无法保证各请求的执行顺序。通过时间统计，可以看到在该IO密集应用中，处理性能得到了有效提升。</p><h3 id="多线程之线程安全"><a href="#多线程之线程安全" class="headerlink" title="多线程之线程安全"></a>多线程之线程安全</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock, Thread</span><br><span class="line">lock = Lock()</span><br><span class="line">some_var = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IncrementThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#read the global variable and then increment it</span></span><br><span class="line">        <span class="keyword">global</span> some_var</span><br><span class="line">        lock.acquire() <span class="comment"># lock acquire</span></span><br><span class="line">        read_value = some_var</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"some_var in %s is %d"</span> % (self.name, read_value)</span><br><span class="line">        some_var = read_value + <span class="number">1</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"some_var in %s after increment is %d"</span> % (self.name, some_var)</span><br><span class="line">        lock.release() <span class="comment"># lock release</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_increment_thread</span><span class="params">()</span>:</span></span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">        t = IncrementThread()</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"After 50 modifications, some_var should have become 50"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"After 50 modifications, some_var is %d"</span> % (some_var,)</span><br><span class="line"> </span><br><span class="line">use_increment_thread()</span><br></pre></td></tr></table></figure><p>解读：通过Lock来实现全局变量的同步访问，防止由于资源竞争而导致执行结果的不确定性。</p><h3 id="多线程之原子操作"><a href="#多线程之原子操作" class="headerlink" title="多线程之原子操作"></a>多线程之原子操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">lock = Lock()</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateListThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.entries = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            time.sleep(<span class="number">0.01</span>)</span><br><span class="line">            self.entries.append(i)</span><br><span class="line">        lock.acquire()</span><br><span class="line">        <span class="keyword">print</span> self.entries</span><br><span class="line">        lock.release()</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_create_list_thread</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        t = CreateListThread()</span><br><span class="line">        t.start()</span><br><span class="line"> </span><br><span class="line">use_create_list_thread()</span><br></pre></td></tr></table></figure><p>解读：若不使用lock，运行几次会发现并没有打印出正确的结果，因为当一个线程正在打印时，CPU切换到了另一个线程，所以产生了不正确的结果。我们需要确保print self.entries是个逻辑上的原子操作，以防打印时被其他线程打断。该示例证明了一个线程不可以修改其他线程内部的变量（非全局变量）。</p><h3 id="多线程之threadpool"><a href="#多线程之threadpool" class="headerlink" title="多线程之threadpool"></a>多线程之threadpool</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">'http://www.google.com'</span>, </span><br><span class="line">    <span class="string">'http://www.amazon.com'</span>, </span><br><span class="line">    <span class="string">'http://www.ebay.com'</span>, </span><br><span class="line">    <span class="string">'http://www.alibaba.com'</span>, </span><br><span class="line">    <span class="string">'http://www.reddit.com'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myRequest</span><span class="params">(url)</span>:</span></span><br><span class="line">    resp = urllib2.urlopen(url)</span><br><span class="line">    <span class="keyword">print</span> url, resp.getcode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeCost</span><span class="params">(request, n)</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">"Elapsed time: %s"</span> % (time.time()-start)</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">pool = threadpool.ThreadPool(<span class="number">5</span>) <span class="comment"># 最多可创建5线程</span></span><br><span class="line"><span class="comment">#makeRequests(some_callable, list_of_args, callback)</span></span><br><span class="line">reqs = threadpool.makeRequests(myRequest, urls, timeCost)</span><br><span class="line">[ pool.putRequest(req) <span class="keyword">for</span> req <span class="keyword">in</span> reqs ]</span><br><span class="line">pool.wait()</span><br></pre></td></tr></table></figure><p>makeRequests创建了要开启多线程的函数，以及函数相关参数和回调函数，其中回调函数可省略。注意，threadpool不是线程安全的。</p><p><img src="/images/pasted-0.png" alt="upload successful"></p><p>引用链接：<a href="https://my.oschina.net/leejun2005/blog/179265" target="_blank" rel="noopener">理解 Python 中的多线程</a></p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;基于代码示例展示Python多线程&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>JAX-RS 简化 REST 应用开发</title>
    <link href="http://yoursite.com/archives/e5f30f60.html"/>
    <id>http://yoursite.com/archives/e5f30f60.html</id>
    <published>2018-12-25T12:41:00.000Z</published>
    <updated>2019-01-16T14:03:32.489Z</updated>
    
    <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>JAX-RS 简化 REST 应用开发<a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h3 id="REST-简介"><a href="#REST-简介" class="headerlink" title="REST 简介"></a>REST 简介</h3><p>REST即Representational State Transfer，由 Roy Fielding 在其博士论文 《 Architectural Styles and the Design of Network-based Software Architectures 》中提出，所以REST 并非标准，而是一种开发 Web 应用的架构风格。REST 基于 HTTP，URI（Uniform Resource Identifier）以及 XML 等现有的、广泛流行的协议和标准，促进了HTTP协议更好的使用。</p><p>相较于基于 SOAP 和 WSDL 的 Web 服务，REST 模式提供了更为简洁的实现方案。目前，越来越多的 Web 服务采用了 REST 风格设计和实现，真实世界中比较著名的 REST 服务包括：Google AJAX 搜索 API、Amazon Simple Storage Service (Amazon S3)等。</p><p>基于 REST 的 Web 服务遵循一些基本的设计原则：</p><ul><li>系统中每一个对象或资源都可以通过一个唯一的 URI 进行寻址，URI 的结构应该简单、可预测且易于理解</li><li>以遵循 RFC-2616 定义的协议方式显式地使用 HTTP 方法，CRUD（Create, Retrieve, Update and Delete）操作与 HTTP 方法之间一一映射：<ul><li>若要在服务器上创建资源，应使用 POST 方法；</li><li>若要检索某个资源，应该使用 GET 方法；</li><li>若要更改资源状态或对其进行更新，应该使用 PUT 方法；</li><li>若要删除某个资源，应该使用 DELETE 方法。</li></ul></li><li>URI访问的每个资源都可以使用不同的形式进行表示（比如 XML、JSON），具体的表现形式取决于访问资源的客户端，客户端与服务提供者使用一种内容协商机制（请求头与 MIME 类型）来选择合适的数据格式，最小化彼此之间的数据耦合。</li></ul><h3 id="JAX-RS-–-Java-API-for-RESTful-Web-Services"><a href="#JAX-RS-–-Java-API-for-RESTful-Web-Services" class="headerlink" title="JAX-RS – Java API for RESTful Web Services"></a>JAX-RS – Java API for RESTful Web Services</h3><p>Java EE 6 引入了对 JSR-311 的支持。JSR-311（JAX-RS：Java API for RESTful Web Services）旨在定义一个统一规范，使得 Java 程序员可以使用一套固定的接口来开发 REST 应用，避免依赖于第三方框架。同时，JAX-RS 使用 POJO 编程模型和基于标注的配置，并集成了 JAXB，从而可以有效缩短 REST 应用的开发周期。</p><p>JAX-RS 定义的 API 位于 javax.ws.rs 包中，其中一些主要的接口、标注和抽象类如图所示：<br><img src="/images/pasted-1.png" alt="upload successful"><br>JAX-RS具体实现由第三方提供，例如 Sun Jersey、Apache CXF 以及 JBoss RESTEasy。</p><p>Web 资源作为一个 Resource 类来实现，对资源的请求由 Resource 方法来处理。Resource 类或 Resource 方法被打上了 Path 标注，Path 标注的值是一个相对的 URI 路径，用于对资源进行定位，路径中可以包含任意的正则表达式以匹配资源。和大多数 JAX-RS 标注一样，Path 标注是可继承的，子类或实现类可以继承超类或接口中的 Path 标注。</p><h4 id="参数标注"><a href="#参数标注" class="headerlink" title="参数标注"></a>参数标注</h4><p>JAX-RS 中涉及 Resource 方法参数的标注包括：@PathParam、@MatrixParam、@QueryParam、@FormParam、@HeaderParam、@CookieParam、@DefaultValue 和 @Encoded。这其中最常用的是 @PathParam，它用于将 @Path 中的模板变量映射到方法参数，模板变量支持使用正则表达式，变量名与正则表达式之间用分号分隔，例如：@Path(“/person/{id:\d+}/“) 。</p><p>JAX-RS 规定 Resource 方法中只允许有一个参数没有打上任何的参数标注，该参数称为实体参数，用于映射请求体。</p><h4 id="参数与返回值类型"><a href="#参数与返回值类型" class="headerlink" title="参数与返回值类型"></a>参数与返回值类型</h4><p>Resource 方法合法的参数类型包括：</p><ol><li>原生类型</li><li>构造函数接收单个字符串参数或者包含接收单个字符串参数的静态方法 valueOf的任意类型</li><li>List<t>，Set<t>，SortedSet<t>（T 为以上的 2 种类型）</t></t></t></li><li>用于映射请求体的实体参数</li></ol><p>Resource 方法合法的返回值类型包括：</p><ol><li>void：状态码 204 和空响应体</li><li>Response：Response 的 status 属性指定了状态码，entity 属性映射为响应体</li><li>GenericEntity：GenericEntity 的 entity 属性映射为响应体，entity 属性为空则状态码为 204，非空则状态码为 200</li><li>其它类型：返回的对象实例映射为响应体，实例为空则状态码为 204，非空则状态码为 200</li></ol><p>对于错误处理，Resource 方法可以抛出非受控异常 WebApplicationException 或者返回包含了适当的错误码集合的 Response 对象。</p><h4 id="Context-标注"><a href="#Context-标注" class="headerlink" title="Context 标注"></a>Context 标注</h4><p>通过 Context 标注，根 Resource 类的实例字段可以被注入如下类型的上下文资源：</p><ul><li>Request、UriInfo、HttpHeaders、Providers、SecurityContext</li><li>HttpServletRequest、HttpServletResponse、ServletContext、ServletConfig</li></ul><h3 id="内容协商与数据绑定"><a href="#内容协商与数据绑定" class="headerlink" title="内容协商与数据绑定"></a>内容协商与数据绑定</h3><p>Web 资源可以有不同的表现形式，服务端与客户端之间需要一种称为内容协商（Content Negotiation）的机制：作为服务端，Resource 方法的 Produces 标注用于指定响应体的数据格式（MIME 类型），Consumes 标注用于指定请求体的数据格式；作为客户端，Accept 请求头用于选择响应体的数据格式，Content-Type 请求头用于标识请求体的数据格式。</p><p>JAX-RS 依赖于 MessageBodyReader 和 MessageBodyWriter 的实现来自动完成返回值到响应体的序列化以及请求体到实体参数的反序列化工作，其中，XML 格式的请求／响应数据与 Java 对象的自动绑定依赖于 JAXB 的实现。</p><p>用户可以使用 Provider 标注来注册使用自定义的 MessageBodyProvider。如例子所示，GsonProvider 类使用了 Google Gson 作为 JSON 格式的 MessageBodyProvider 的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Provider</span> </span><br><span class="line"><span class="meta">@Produces</span>(<span class="string">"application/json"</span>) </span><br><span class="line"><span class="meta">@Consumes</span>(<span class="string">"application/json"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonProvider</span> <span class="keyword">implements</span> <span class="title">MessageBodyWriter</span>&lt;<span class="title">Object</span>&gt;, <span class="title">MessageBodyReader</span>&lt;<span class="title">Object</span>&gt; </span>&#123; </span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Gson gson; </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">GsonProvider</span><span class="params">()</span> </span>&#123; </span><br><span class="line">       gson = <span class="keyword">new</span> GsonBuilder().excludeFieldsWithoutExposeAnnotation().setDateFormat( </span><br><span class="line">               <span class="string">"yyyy-MM-dd"</span>).create(); </span><br><span class="line">   &#125; </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReadable</span><span class="params">(Class&lt;?&gt; type, Type genericType, Annotation[] annotations, MediaType mediaType)</span> </span>&#123; </span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">   &#125; </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">readFrom</span><span class="params">(Class&lt;Object&gt; type, Type genericType, Annotation[] annotations, MediaType mediaType,  MultivaluedMap&lt;String, String&gt; httpHeaders, InputStream entityStream)</span> <span class="keyword">throws</span> IOException, WebApplicationException </span>&#123; </span><br><span class="line">       <span class="keyword">return</span> gson.fromJson(<span class="keyword">new</span> InputStreamReader(entityStream, <span class="string">"UTF-8"</span>), type); </span><br><span class="line">   &#125; </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isWriteable</span><span class="params">(Class&lt;?&gt; type, Type genericType, Annotation[] annotations, MediaType mediaType)</span> </span>&#123; </span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">   &#125; </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSize</span><span class="params">(Object obj, Class&lt;?&gt; type, Type genericType, Annotation[] annotations, MediaType mediaType)</span> </span>&#123; </span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>; </span><br><span class="line">   &#125; </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(Object obj, Class&lt;?&gt; type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap&lt;String, Object&gt; httpHeaders, OutputStream entityStream)</span><span class="keyword">throws</span> IOException, WebApplicationException </span>&#123; </span><br><span class="line">       entityStream.write(gson.toJson(obj, type).getBytes(<span class="string">"UTF-8"</span>)); </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JAX-RS-与-JPA-的结合使用"><a href="#JAX-RS-与-JPA-的结合使用" class="headerlink" title="JAX-RS 与 JPA 的结合使用"></a>JAX-RS 与 JPA 的结合使用</h3><p>由于 JAX-RS 和 JPA 同样都使用了基于 POJO 和标注的编程模型，因而很易于结合在一起使用。示例应用中的 Web 资源同时也是持久化到数据库中的实体，同一个 POJO 类上既有 JAXB 的标注，也有 JPA 的标注 ( 或者还有 Gson 的标注 ) ，这使得应用中类的个数得以减少。如例子所示，Account 类可以在 JAX-RS 与 JPA 之间得到复用，它不但可以被 JAX-RS 绑定为请求体 / 响应体的 XML/JSON 数据，也可以被 JPA 持久化到关系型数据库中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span> </span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"TABLE_ACCOUNT"</span>) </span><br><span class="line"><span class="meta">@XmlRootElement</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123; </span><br><span class="line">   <span class="meta">@Id</span> </span><br><span class="line">   <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY) </span><br><span class="line">   <span class="meta">@Column</span>(name = <span class="string">"COL_ID"</span>) </span><br><span class="line">   <span class="meta">@Expose</span> </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id; </span><br><span class="line"> </span><br><span class="line">   <span class="meta">@ManyToOne</span> </span><br><span class="line">   <span class="meta">@JoinColumn</span>(name = <span class="string">"COL_PERSON"</span>) </span><br><span class="line">   <span class="meta">@Expose</span> </span><br><span class="line">   <span class="keyword">private</span> Person person; </span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Column</span>(name = <span class="string">"COL_AMOUNT"</span>) </span><br><span class="line">   <span class="meta">@Expose</span> </span><br><span class="line">   <span class="keyword">private</span> BigDecimal amount; </span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Column</span>(name = <span class="string">"COL_DATE"</span>) </span><br><span class="line">   <span class="meta">@Expose</span> </span><br><span class="line">   <span class="keyword">private</span> Date date; </span><br><span class="line"> </span><br><span class="line">   <span class="meta">@ManyToOne</span> </span><br><span class="line">   <span class="meta">@JoinColumn</span>(name = <span class="string">"COL_CATEGORY"</span>) </span><br><span class="line">   <span class="meta">@Expose</span> </span><br><span class="line">   <span class="keyword">private</span> Category category; </span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Column</span>(name = <span class="string">"COL_COMMENT"</span>) </span><br><span class="line">   <span class="meta">@Expose</span> </span><br><span class="line">   <span class="keyword">private</span> String comment; </span><br><span class="line">   </span><br><span class="line">   ......</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>REST 作为一种轻量级的 Web 服务架构被越来越多的开发者所采用，JAX-RS 的发布则规范了 REST 应用开发的接口。</p><p>引用链接：<a href="https://www.ibm.com/developerworks/cn/java/j-lo-jaxrs/" target="_blank" rel="noopener">使用 JAX-RS 简化 REST 应用开发</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;JAX-RS 简化 REST 应用开发
    
    </summary>
    
      <category term="REST" scheme="http://yoursite.com/categories/REST/"/>
    
    
      <category term="JAX-RS" scheme="http://yoursite.com/tags/JAX-RS/"/>
    
  </entry>
  
</feed>
